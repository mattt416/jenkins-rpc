
# defaults - These must be set as the default value of a jenkins parameter in order to be injected into the build Environment.
- defaults:
    name: global
    RPC_REPO: "https://github.com/rcbops/rpc-openstack"
    TEMPEST_TESTS: "scenario heat_api cinder_backup defcore"
    DEPLOY_CEPH: "no"
    DEPLOY_SWIFT: "yes"
    DEPLOY_MAAS: "yes"
    USER_VARS: ""
    UPGRADE: "no"
    UPGRADE_FROM_REF: "origin/liberty-12.2"
    UPGRADE_FROM_NEAREST_TAG: "yes"
    UPGRADE_TYPE: "major"
    UBUNTU_REPO: "http://mirror.rackspace.com/ubuntu"
    JENKINS_RPC_REPO: "https://github.com/rcbops/jenkins-rpc"
    JENKINS_RPC_BRANCH: "master"
    BUILD_SCRIPT_PATH: "scripts/aio_build_script.sh"
    # Override the OSA submodule?
    OA_REPO: "none"
    OA_BRANCH: ""
    # branch for periodics to build
    branch: master
    # PRs targetting branches that match this pattern will be tested with this job
    branches: "liberty-.*|mitaka-.*|newton-.*|master"
    REPO_HOST: "23.253.158.148"
    REPO_USER: "root"
    CRON: "H H(9-21) * * 1-5"
    KEEP_INSTANCE: "no"
    IMAGE: "Ubuntu 14.04 LTS"
    BUILD_SCRIPT_FUNCTION: "managed_aio"

#
# Macros for repeated blocks

# Define the github project associated with jenkins rpc
- property:
    name: jenkins-rpc-github
    properties:
      - github:
          url: https://github.com/rcbops/jenkins-rpc
- property:
    name: rpc-openstack-github
    properties:
      - github:
          url: https://github.com/rcbops/rpc-openstack

# Define the scm/git repo associated with jenkins-rpc
- scm:
    name: jenkins-rpc-git
    scm:
      - git:
          url: "$JENKINS_RPC_REPO"
          branches:
            - "$JENKINS_RPC_BRANCH"
          refspec: "+refs/pull/*:refs/remotes/origin/pr/* +refs/heads/*:refs/remotes/origin/*"
          name: origin

# Note: JJB Macros are not expanded in macros, even if that macro is used in a
# template.  so any parameters that have jjb vars as defaults can't be defined
# in a macro :(

- parameter:
    name: pr-params
    parameters:
      - string:
          name: ghprbActualCommit
          default: ""
      - string:
          name: ghprbAuthorRepoGitUrl
          default: ""
      - string:
          name: ghprbGhRepository
          default: ""
      - string:
          name: ghprbSourceBranch
          default: ""
      - string:
          name: GIT_BRANCH
          default: ""


- project:
    name: 'JJB-AIO-Jobs'
    # Note: branch is the branch for periodics to build
    #       branches is the branch pattern to match for PR Jobs.
    series:
      - liberty:
          branch: liberty-12.2
          branches: "liberty-.*"
      - mitaka:
          branch: mitaka-13.1
          branches: "mitaka-.*"
      - newton:
          branch: newton-14.0
          branches: "newton-.*"
      - master:
          branch: master
          branches: "master"
    context:
      - swift
      - ceph:
          DEPLOY_CEPH: "yes"
          USER_VARS: |
            cinder_cinder_conf_overrides:
                DEFAULT:
                    default_volume_type: ceph
            cinder_service_backup_driver: cinder.backup.drivers.ceph
            cinder_service_backup_program_enabled: true
            tempest_volume_multi_backend_enabled: true
            tempest_volume_backend_names: [ LVM_iSCSI, ceph ]
          TEMPEST_TESTS: "scenario heat_api cinder_backup cinder_multi_backend defcore"
      - upgrade:
          UPGRADE: "yes"
      - xenial:
          IMAGE: "Ubuntu 16.04 LTS"

    # NOTE: Hugh tested this and found that ztrigger overrides series and
    #       trigger doesn't, which is odd because both trigger and ztrigger
    #       sort after series.
    ztrigger:
      - pr:
          CRON: ""
          USER_VARS: "maas_use_api: false"
      - periodic:
          branches: "do_not_build_on_pr"
    exclude:
      - series: liberty
        context: upgrade
      - series: newton
        context: upgrade
      - series: master
        context: upgrade

      # Xenial builds are run for newton and above.
      - series: liberty
        context: xenial
      - series: mitaka
        context: xenial
    jobs:
      - 'JJB-RPC-AIO_{series}-{context}-{ztrigger}'

- project:
    name: 'JJB-AIO-Experimental-Jobs'
    jobs:
      - 'JJB-RPC-AIO_{series}-{context}-{ztrigger}':
          series: mitaka-13.1
          branch: mitaka-13.1
          branches: "do_not_build_on_pr"
          context: experimental
          ztrigger: ondemand
          DEPLOY_MAAS: "no"
          CRON: ""

- project:
    name: 'JJB-Misc-Jobs'
    jobs:
      - 'JJB-Misc-{name}':
          name: Build-Summary
          shell: |
            #!/bin/bash -x
            . /opt/jenkins/venvs/buildsummary/bin/activate
            cd scripts/build-summary
            python build-summary-gh.py /opt/jenkins_builds/jobs/{{RPC-AIO,JJB-RPC-Training-Multinode,JJB-RPC-AIO*}}/builds/*/build.xml \
                > /opt/jenkins/www/index_tmp.html \
                && cp /opt/jenkins/www/index_tmp.html /opt/jenkins/www/index.html
      - 'JJB-Misc-{name}':
          name: AIO-Cleanup
          shell: |
            #!/bin/bash

            source /opt/jenkins/creds/mattt_jenkins_iad
            source /opt/jenkins/venvs/rpcheat/bin/activate
            source /opt/jenkins/creds/jenkins_api_access.creds

            python scripts/aio_cleanup.py
      - 'JJB-Misc-{name}':
          name: Multinode-Cleanup
          shell: |
            #!/bin/bash

            set -x
            set -e
            bash scripts/heat_cleanup.sh

- project:
    name: 'JJB-artifacts-python'
    series:
      - newton_trusty:
          branch: artifacts-14.0
      - newton_xenial:
          branch: artifacts-14.0
          IMAGE: "Ubuntu 16.04 LTS"
    jobs:
      - 'JJB-RPC-AIO_{series}-{context}-{ztrigger}':
          branches: do_not_build_on_pr
          context: "artifacts_python"
          ztrigger: ondemand
          DEPLOY_MAAS: "no"
          CRON: ""
          BUILD_SCRIPT_FUNCTION: managed_aio_artifacts_python

- project:
    name: 'JJB-artifacts-containers'
    series:
      - newton_trusty:
          branch: artifacts-14.0
      - newton_xenial:
          branch: artifacts-14.0
          IMAGE: "Ubuntu 16.04 LTS"
    jobs:
      - 'JJB-RPC-AIO_{series}-{context}-{ztrigger}':
          branches: do_not_build_on_pr
          context: "artifacts_containers"
          ztrigger: ondemand
          DEPLOY_MAAS: "no"
          CRON: ""
          BUILD_SCRIPT_FUNCTION: managed_aio_artifacts_containers

## Job Definitions
# This template is for testing PRs against Jenkins-RPC
# It is triggered by PR and runs an AIO with the proposed version
# of jenkins-rpc.
#

- job-template:
    name: 'JJB-RPC-AIO_{series}-{context}-{ztrigger}'
    project-type: freestyle
    node: master
    defaults: global
    disabled: false
    concurrent: true
    logrotate:
      daysToKeep: 30
    wrappers:
      - ansicolor
      - timestamps
      - credentials-binding:
        - text:
            credential-id: 372ebb8f-4614-492b-9812-62c560393b90
            variable: rackspace_cloud_auth_url
        -  text:
            credential-id: e1b379ac-e090-4b4e-96d5-0f0c0cc272d9
            variable: rackspace_cloud_username
        -  text:
            credential-id: fabf7ee4-246a-4be5-a996-01d2ae70cd18
            variable: rackspace_cloud_tenant_id
        -  text:
            credential-id: 056d4a4a-57b2-4303-8c6e-3bb77631c8b4
            variable: rackspace_cloud_password
        -  text:
            credential-id: 281f38e2-a060-4188-9971-b6bb5e600ef3
            variable: rackspace_cloud_api_key
        -  text:
            credential-id: RPC_REPO_KEY
            variable: REPO_KEY

      # Ensure builds timeout after 30 mins of inactivity
      - raw:
          xml: |
            <hudson.plugins.build__timeout.BuildTimeoutWrapper plugin="build-timeout@1.15.1">
              <strategy class="hudson.plugins.build_timeout.impl.NoActivityTimeOutStrategy">
                <timeoutSecondsString>1800</timeoutSecondsString>
              </strategy>
              <operationList>
                <hudson.plugins.build__timeout.operations.AbortOperation/>
              </operationList>
            </hudson.plugins.build__timeout.BuildTimeoutWrapper>

    parameters:
      - pr-params
      - string:
          name: JENKINS_RPC_REPO
          default: "{JENKINS_RPC_REPO}"
          description: "Repo url for JENKINS_RPC"
      - string:
          name: JENKINS_RPC_BRANCH
          default: "{JENKINS_RPC_BRANCH}"
          description: "Branch to checkout for JENKINS_RPC"
      - string:
          name: ghprbTargetBranch
          default: "{branch}"
          description: |
            Target branch - the branch to be tested (sha1 param) will
            be rebased against this. Also overridden by github pull request builder plugin.
      - string:
          name: sha1
          default: "{branch}"
          description: |
              rpc-openstack git ref that points to the code to be tested
              (sha/tag/branch/etc).
              This is overridden by the github pull request builder plugin
      - string:
          name: DEPLOY_MAAS
          default: "{DEPLOY_MAAS}"
          description: "Deploy Maas? yes/no"
      - text:
          name: USER_VARS
          default: "{USER_VARS}"
          description: "OSA/RPC USER_VARS to inject for this build"
      - string:
          name: UPGRADE
          default: "{UPGRADE}"
          description: "Run an upgrade? yes/no"
      - string:
          name: UPGRADE_FROM_REF
          default: "{UPGRADE_FROM_REF}"
          description: "An tag/sha/ref to upgrade from"
      - string:
          name: UPGRADE_FROM_NEAREST_TAG
          default: "{UPGRADE_FROM_NEAREST_TAG}"
          description: "Substitute the upgrade_from_ref for the nearest tag yes/no"
      - string:
          name: UPGRADE_TYPE
          default: "{UPGRADE_TYPE}"
          description: "Type of upgrade to perform. Majors have an upgrade script, others re-run deploy.sh"
      - string:
          name: RPC_REPO
          default: "{RPC_REPO}"
          description: "RPC REPO URL"
      - string:
          name: TEMPEST_TESTS
          default: "{TEMPEST_TESTS}"
          description: "Tempest test set to run, defined in osa/tempest-role/gate-check-commit"
      - string:
          name: DEPLOY_CEPH
          default: "{DEPLOY_CEPH}"
          description: "Deploy Ceph? yes/no"
      - string:
          name: DEPLOY_SWIFT
          default: "{DEPLOY_SWIFT}"
          description: "Deploy SwifT? yes/no"
      - string:
          name: UBUNTU_REPO
          default: "{UBUNTU_REPO}"
          description: "Ubuntu repo to use, currently requires all sections so not compatible with OS infra mirrors"
      - string:
          name: BUILD_SCRIPT_PATH
          default: "{BUILD_SCRIPT_PATH}"
          description: "Path to the build script within JENKINS_RPC_REPO"
      - string:
          name: BUILD_SCRIPT_FUNCTION
          default: "{BUILD_SCRIPT_FUNCTION}"
          description: "The name of the build function within JENKINS_RPC_REPO"
      - string:
          name: OA_REPO
          default: "{OA_REPO}"
          description: "Openstack Ansible Repo - can be used to override the RPC OSA submodule"
      - string:
          name: OA_BRANCH
          default: "{OA_BRANCH}"
          description: "Openstack Ansible Branch - can be used to override the RPC OSA submodule"
      - string:
          name: KEEP_INSTANCE
          default: "{KEEP_INSTANCE}"
          description: |
            When set to no, instance is deleted at the end of the job.
            Set to yes to prevent cleanup, for debug etc. Instance will be
            removed by the cleanup job after 48 hours.
      - string:
          name: IMAGE
          default: "{IMAGE}"
          description: "Pattern used to find an image to build the instance for the aio, defaults to 'Ubuntu 14.04 LTS'"
      - string:
          name: REPO_USER
          default: "{REPO_USER}"
          description: "The user account for write access to rpc-repo"
      - string:
          name: REPO_HOST
          default: "{REPO_HOST}"
          description: "The host address for rpc-repo"
    properties:
      - rpc-openstack-github
    triggers:
      - timed: "{CRON}"
      - github-pull-request:
          admin-list:
            - alextricity25
            - mattt416
            - hughsaunders
          org-list:
            - rcbops
          github-hooks: true
          trigger-phrase: '.*recheck_all.*|.*recheck_{context}.*'
          only-trigger-phrase: false
          white-list-target-branches:
            - "{branches}"
          auth-id: "8b635975-7d59-45f8-b7ee-8bceb2e44ba3"
          status-context: '{context}'
    scm:
      - git:
          url: "{RPC_REPO}"
          branches:
            - "${{sha1}}"
          refspec: "+refs/pull/*:refs/remotes/origin/pr/* +refs/heads/*:refs/remotes/origin/*"
          name: origin
    builders:
      - shell: |
          #!/usr/bin/sudo -E /bin/bash -xeu
          git clone $JENKINS_RPC_REPO buildscript_repo
          pushd buildscript_repo
            git fetch origin "+refs/pull/*:refs/remotes/origin/pr/*"
            git checkout $JENKINS_RPC_BRANCH
            git reset --hard origin/$JENKINS_RPC_BRANCH
            . scripts/gating_bash_lib.sh
            $BUILD_SCRIPT_FUNCTION "$IMAGE"
    publishers:
      # archive artifacts - these are files (logs) that are transferred to the
      # jenkins master and are available after the build has completed
      - postbuildscript:
          script-only-if-succeeded: false
          builders:
            - shell: |
                #!/usr/bin/sudo -E /bin/bash
                pushd buildscript_repo
                  . scripts/gating_bash_lib.sh
                  managed_cleanup
                popd
      - postbuildscript:
          script-only-if-succeeded: true
          builders:
            - shell: |
               #!/usr/bin/sudo -E /bin/bash

               # Required Environment Variables:
               # REPO_KEY - ssh key provided by credentials binding

               # Required JJB/Jinja template variables
               # REPO_USER - user to login to repo server as
               # REPO_HOST - hostname/ip of repo server
               REPO_USER="{REPO_USER}"
               REPO_HOST="{REPO_HOST}"

               # Shell Opts
               set +x # avoid leaking ssh keys
               set -u # avoid ref before assignment errors

               trap "exit 0" EXIT
               # The above trap in combination with -u will cause this script to
               # halt when attempting to read an undefined variable, but it will
               # still exit 0. Halting on undefined variables is important so
               # that files don't get rsynced to unexpected locations.

               push(){{
                 src="$1"
                 dest="$2"
                 extra_args=${{3:-}}
                 description="$src to rpc-repo:$dest"
                 echo "===== Start: $description  ===="
                 [[ -d $src ]] || {{
                   echo "Src directory $src not found"
                   exit
                 }}
                 rsync \
                   ${{extra_args}} \
                   --delay-updates \
                   --recursive \
                   --links \
                   --itemize-changes \
                   --rsh="ssh -i ${{key}} -o StrictHostKeyChecking=no" \
                   $src \
                   ${{REPO_USER}}@${{REPO_HOST}}:${{dest}}
                 rc=$?
                 echo "===== End: $description (rc: $rc) ===="
               }}

               # Vars

               repo_container="$(lxc-ls '.*_repo_'|head -n1)"
               local_base="/openstack/${{repo_container}}/repo"
               remote_base="/var/www/repo"

               # Main

               [[ -z "${{repo_container}}" ]] && {{
                 echo "No repo container found, quitting"
                 exit 0
               }}

               # Prep key, header and footer are stripped out because line
               # breaks are lost, easist to remove header and footer, then
               # convert all spaces to newlines, then add header/footer back in
               key=$(tempfile)
               echo "-----BEGIN RSA PRIVATE KEY-----" > $key
               echo "$REPO_KEY" \
                 |sed -e 's/\s*-----BEGIN RSA PRIVATE KEY-----\s*//' \
                      -e 's/\s*-----END RSA PRIVATE KEY-----\s*//' \
                      -e 's/ /\n/g' >> $key
               echo "-----END RSA PRIVATE KEY-----" >> $key
               chmod 600 ${{key}}

               # The following artifacts are purely additive - nothing must
               # ever be deleted at the target.
               push "${{local_base}}/pools/" "${{remote_base}}/pools"

               # We need to skip the index.html file in this copy as that
               # is one of the unnecessary files produced in the repo-build
               # prior to Newton.
               push "${{local_base}}/links/" "${{remote_base}}/links" "--exclude index.html"

               # The following artifacts must be exactly as they look in the
               # build when it completes. Anything that is on the target that
               # is not in the build must be removed.
               push "${{local_base}}/venvs/*" "${{remote_base}}/venvs/" "--delete"
               push "${{local_base}}/os-releases/*" "${{remote_base}}/os-releases/" "--delete"

               rm $key
      - archive:
          artifacts: "archive*/**/*"
          allow-empty: true
      # Publish tempest results to the Jenkins UI
      - junit:
          results: "archive/openstack/*_utility_*/*.xml"
          allow-empty-results: true

- job-template:
    name: "JJB-Misc-{name}"
    display-name: "JJB-Misc-{name}"
    project-type: freestyle
    description: 'Managed by JJB: Misc {name}'
    defaults: global
    disabled: false
    concurrent: false
    node: master
    logrotate:
      numToKeep: 50
    parameters:
      - string:
          name: JENKINS_RPC_REPO
          default: "{JENKINS_RPC_REPO}"
          description: "Repo url for JENKINS_RPC"
      - string:
          name: JENKINS_RPC_BRANCH
          default: "{JENKINS_RPC_BRANCH}"
          description: "Branch to checkout for JENKINS_RPC"
    # NOTE(mattt): Is this property actually required here?
    properties:
      - jenkins-rpc-github
    scm:
      - jenkins-rpc-git
    triggers:
      - timed: "H/5 * * * *"
    builders:
      - shell: |
          {shell}

# Update Jenkins Jobs.
# This job runs after changes are merged to jenkins-rpc.
# Jobs defined in this file will be updated to match
# the configuration defined here.
- job:
    name: JJB-Job-Update
    display-name: JJB-Job-Update
    project-type: freestyle
    description: 'Managed by JJB: Update JJB Jobs'
    defaults: global
    disabled: false
    concurrent: false
    node: master
    logrotate:
      daysToKeep: 30
    parameters:
      - string:
          name: JENKINS_RPC_REPO
          default: "https://github.com/rcbops/jenkins-rpc"
          description: "Repo url for JENKINS_RPC"
      - string:
          name: sha1
          default: "master"
          description: |
            branch/sha of jenkins-rpc to be tested.
      - string:
          name: PURGE_OLD_JOBS
          default: "yes"
          description: |
            Auto remove obsolete jobs. Useful when jobs are removed from
            jobs.yaml or are renamed. yes/no
    properties:
      - jenkins-rpc-github
    wrappers:
      - credentials-binding:
        - text:
            credential-id: JJB_JENKINS_ACCOUNT
            variable: JJB_JENKINS_ACCOUNT
    scm:
      - git:
          url: "$JENKINS_RPC_REPO"
          branches:
            - "$sha1"
          refspec: "+refs/pull/*:refs/remotes/origin/pr/* +refs/heads/*:refs/remotes/origin/*"
          name: origin
    triggers:
      - github # triggered post merge, not on PR
    builders:
      - shell: |
          git show HEAD
          scripts/run_jjb.sh update


- job:
    name: JJB-Job-Test
    project-type: freestyle
    description: "Test JJB job defintions for syntax"
    disabled: false
    concurrent: false
    node: master
    logrotate:
      daysToKeep: 30
    properties:
      - jenkins-rpc-github
    parameters:
      - string:
          name: JENKINS_RPC_REPO
          default: "https://github.com/rcbops/jenkins-rpc"
          description: "Repo url for JENKINS_RPC"
      - string:
          name: sha1
          default: "master"
          description: |
            branch/sha of jenkins-rpc to be tested.
    wrappers:
      - credentials-binding:
        - text:
            credential-id: JJB_JENKINS_ACCOUNT
            variable: JJB_JENKINS_ACCOUNT
    scm:
      - git:
          url: "$JENKINS_RPC_REPO"
          branches:
            - "$sha1"
          refspec: "+refs/pull/*:refs/remotes/origin/pr/* +refs/heads/*:refs/remotes/origin/*"
          name: origin
    triggers:
      - github-pull-request:
          admin-list:
            - alextricity25
            - mattt416
            - hughsaunders
          org-list:
            - rcbops
          github-hooks: true
          trigger-phrase: '.*recheck_all.*|.*recheck_jjb.*'
          only-trigger-phrase: false
          white-list-target-branches:
            - "master"
          auth-id: "8b635975-7d59-45f8-b7ee-8bceb2e44ba3"
          status-context: 'JJB-Test'
    builders:
      - shell: |
          git show HEAD
          scripts/run_jjb.sh test

- job:
    name: JJB-RPC-Training-Multinode
    node: master
    concurrent: true
    build-discarder:
      daysToKeep: 30
    triggers:
      - timed: "H */6 * * *"
    parameters:
      - string:
          name: RPC_HEAT_ANSIBLE_REPO
          default: "https://github.com/rcbops/rpc-heat-ansible/"
          description: "Repo to clone for rpc-heat-ansible templates"
      - string:
          name: RPC_HEAT_ANSIBLE_RELEASE
          default: "rpc_gating"
          description: "ref to checkout for rpc-heat-ansible"
      - string:
          name: RPC_HEAT_ANSIBLE_PLAYBOOK
          default: "rpc-12.0-playbook.yml"
          description: "playbook to run from rpc-heat-ansible"
      - string:
          name: RPC_HEAT_ANSIBLE_TAGS
          default: "compute,block,object,ceph,tempest"
          description: "Tags to run from the rpc-heat-ansible playbook"
      - string:
          name: RPC_RELEASE
          default: "master"
          description: "ref to checkout for rpc-openstack"
      - string:
          name: HEAT_TEMPLATE
          default: "ha-full-ceph"
          description: "template to run form rpc-heat-ansible /templates/rpc-${HEAT_TEMPLATE}.yml"
      - string:
          name: DEPLOY_RETRIES
          default: "2"
          description: "how many times to retry the rpc deploy"
      - string:
          name: APPLY_PATCHES
          default: "False"
          description: "Deploy patches carried in rpc-heat-ansible?"
      - string:
          name: DELETE_STACK
          default: "yes"
          description: "yes/no - cleanup stack at end of job?"
      - string:
          name: TEMPEST_TESTS
          default: "scenario defcore"
          description: "tempest test sets to run. Test sets are defined in osa/openstack_tempest_gate.sh"
    wrappers:
      - ansicolor
      - timestamps
      - credentials-binding:
        - text:
            credential-id: rpcorchestration_api_key
            variable: rpcorchestration_api_key
        -  text:
            credential-id: rpcorchestration_password
            variable: rpcorchestration_password
        -  text:
            credential-id: rpcorechestration_username
            variable: rpcorechestration_username
        -  text:
            credential-id: rpcorchestration_tenant_name
            variable: rpcorchestration_tenant_name
      - timeout:
          timeout: 360
          fail: True
    scm:
      - git:
          url: "${RPC_HEAT_ANSIBLE_REPO}"
          branches:
            - "${RPC_HEAT_ANSIBLE_RELEASE}"
    builders:
        - shell: |
            jenkins/build.sh
    publishers:
      - postbuildscript:
          script-only-if-succeeded: false
          builders:
            - shell: |
                jenkins/cleanup.sh ||:
      - archive:
          artifacts: "artifacts/**"
          allow-empty: true
      # Publish tempest results to the Jenkins UI
      - junit:
          results: "artifacts/*.xml"
          allow-empty-results: true

- job:
    name: JJB-artifacts-apt
    node: ArtifactBuilder
    concurrent: false
    build-discarder:
      daysToKeep: 30
    triggers:
      - timed: "H 4 * * *"
    parameters:
      - pr-params
      - string:
          name: ghprbTargetBranch
          default: "{branch}"
          description: |
            Target branch - the branch to be tested (sha1 param) will
            be rebased against this. Also overridden by github pull request builder plugin.
      - string:
          name: RPC_REPO
          default: "https://github.com/rcbops/rpc-openstack"
          description: "RPC REPO URL"
      - string:
          name: RPC_REPO_BRANCH
          default: "artifacts-14.0"
          description: "RPC REPO Branch"
      - string:
          name: ANSIBLE_DEBUG
          default: "0"
          description: "Enables/disables the ansible debug log"
      - string:
          name: ANSIBLE_VERBOSITY
          default: "-v"
          description: "Change the verbosity level of ansible playbook runs"
      - string:
          name: RPC_ARTIFACTS_FOLDER
          default: "/var/www/artifacts"
          description: "Folder to store artifacts (private)"
      - string:
          name: RPC_ARTIFACTS_PUBLIC_FOLDER
          default: "/var/www/repo"
          description: "Folder to store artifacts (public)"
      - string:
          name: RECREATE_SNAPSHOTS
          default: "NO"
          description: "Set this to YES to destroy existing snapshot for the current artifact version"
    wrappers:
      - ansicolor
      - timestamps
      - credentials-binding:
        - text:
            credential-id: RPC_REPO_IP
            variable: REPO_HOST
        - text:
            credential-id: RPC_REPO_SSH_USERNAME_TEXT
            variable: REPO_USER
        - file:
            credential-id: RPC_REPO_SSH_USER_PRIVATE_KEY_FILE
            variable: REPO_USER_KEY
        - file:
            credential-id: RPC_REPO_SSH_HOST_PUBLIC_KEY_FILE
            variable: REPO_HOST_PUBKEY
        - file:
            credential-id: RPC_REPO_GPG_SECRET_KEY_FILE
            variable: GPG_PRIVATE
        - file:
            credential-id: RPC_REPO_GPG_PUBLIC_KEY_FILE
            variable: GPG_PUBLIC
      - timeout:
          timeout: 360
          fail: True
    scm:
      - git:
          url: "${RPC_REPO}"
          branches:
            - "${RPC_REPO_BRANCH}"
    builders:
      - shell: |
          ./scripts/artifacts-building/apt/build-apt-artifacts.sh

- job:
    name: JJB-artifacts-git
    node: ArtifactBuilder
    concurrent: false
    build-discarder:
      daysToKeep: 30
    triggers:
      - timed: "H 4 * * *"
    parameters:
      - string:
          name: RPC_REPO
          default: "https://github.com/rcbops/rpc-openstack"
          description: "RPC REPO URL"
      - string:
          name: RPC_REPO_BRANCH
          default: "artifacts-14.0"
          description: "RPC REPO Branch"
    wrappers:
      - ansicolor
      - timestamps
      - credentials-binding:
        - text:
            credential-id: RPC_REPO_IP
            variable: REPO_HOST
        - text:
            credential-id: RPC_REPO_SSH_USERNAME_TEXT
            variable: REPO_USER
        - file:
            credential-id: RPC_REPO_SSH_USER_PRIVATE_KEY_FILE
            variable: REPO_USER_KEY
        - file:
            credential-id: RPC_REPO_SSH_HOST_PUBLIC_KEY_FILE
            variable: REPO_HOST_PUBKEY
      - timeout:
          timeout: 360
          fail: True
    scm:
      - git:
          url: "${RPC_REPO}"
          branches:
            - "${RPC_REPO_BRANCH}"
    builders:
      - shell: |
          #!/bin/bash
          set -e
          set -o pipefail
          # Make sure that the rpc-repo key is implemented and usable.
          mkdir -p ~/.ssh/
          set +x
          cat $REPO_USER_KEY > ~/.ssh/repo.key
          chmod 600 ~/.ssh/repo.key
          set -x
          grep "${REPO_HOST}" ~/.ssh/known_hosts || echo "${REPO_HOST} $(cat $REPO_HOST_PUBKEY)" >> ~/.ssh/known_hosts
          # We want the role downloads to be done via git
          # This ensures that there is no race condition with the aptly job
          export ANSIBLE_ROLE_FETCH_MODE="git-clone"
          # The rpc-openstack repo requires the openstack-ansible submodule
          # to be initiated and updated
          git submodule init
          git submodule update
          # The BASE_DIR needs to be set to ensure that the scripts
          # know it and use this checkout appropriately.
          export BASE_DIR=${PWD}
          # We need both Ansible and the OSA plugins available.
          # The simplest way to do this is to use the bootstrap script.
          ./scripts/bootstrap-ansible.sh
          # Setup the inventory
          echo '[mirrors]' > ${BASE_DIR}/inventory
          echo "repo ansible_host=${REPO_HOST} ansible_user=${REPO_USER} ansible_ssh_private_key_file='~/.ssh/repo.key' " >> ${BASE_DIR}/inventory
          # Fetch all the git repositories, then push them to rpc-repo
          # The openstack-ansible CLI is used to ensure that the library path is set
          openstack-ansible ${BASE_DIR}/scripts/artifacts-building/openstackgit-update.yml -i ${BASE_DIR}/inventory -vv

- job:
    name: JJB-Upgrade-Matrix
    project-type: workflow
    concurrent: true
    parameters:
      - string:
          name: KEEP_INSTANCE
          default: "no"
          description: |
            When set to no, instance is deleted at the end of the job.
            Set to yes to prevent cleanup, for debug etc. Instance may still
            get cleaned up by another cleanup job.
      - string:
          name: JENKINS_RPC_REPO
          default: "http://github.com/rcbops/jenkins-rpc"
          description: |
            Repo to pull build scripts from
      - string:
          name: JENKINS_RPC_BRANCH
          default: "master"
          description: |
            Branch of JENKINS_RPC to checkout.

    wrappers:
      - ansicolor
    dsl: |
      def upgrade_paths = [:]
      // for some reason https://issues.jenkins-ci.org/browse/JENKINS-26481
      // defining the closure outside of a method doesnt seem to work.
      def make_step(path){
          return { per_path_block(path) }
      }

      // this method is called for each upgrade path in parallel
      def per_path_block(path){
        timestamps {
          timeout(time: 6, unit: 'HOURS'){
            node('master'){
              deleteDir()
              stage(path['repr']){
                echo "---From: ${path['from_name']}/${path['from_sha']}  To: ${path['to_name']}/${path['to_sha']}---"
                withCredentials([
                      [$class: 'StringBinding',
                      credentialsId: '281f38e2-a060-4188-9971-b6bb5e600ef3',
                      variable: 'rackspace_cloud_api_key'],
                      [$class: 'StringBinding',
                      credentialsId: '372ebb8f-4614-492b-9812-62c560393b90',
                      variable: 'rackspace_cloud_auth_url'],
                      [$class: 'StringBinding',
                      credentialsId: '056d4a4a-57b2-4303-8c6e-3bb77631c8b4',
                      variable: 'rackspace_cloud_password'],
                      [$class: 'StringBinding',
                      credentialsId: 'fabf7ee4-246a-4be5-a996-01d2ae70cd18',
                      variable: 'rackspace_cloud_tenant_id'],
                      [$class: 'StringBinding',
                      credentialsId: 'e1b379ac-e090-4b4e-96d5-0f0c0cc272d9',
                      variable: 'rackspace_cloud_username']]) {
                  withEnv(["UPGRADE=yes",
                            "sha1=${path['to_sha']}",
                            "ghprbActualCommit=${path['to_sha']}",
                            "UPGRADE_FROM_REF=${path['from_sha']}",
                            "UPGRADE_FROM_NEAREST_TAG=no",
                            "UPGRADE_TYPE=${path['type']}",
                            "DEPLOY_MAAS=yes",
                            "UBUNTU_REPO=http://mirror.rackspace.com/ubuntu",
                            "ROOT_BUILD_CAUSE=${currentBuild.build().getAction(CauseAction.class).getShortDescription()}",
                            "WORKSPACE=${pwd()}",
                            "KEEP_INSTANCE=${KEEP_INSTANCE}",
                            "TEMPEST_TESTS='scenario defcore'",
                            "UPGRADE_PATH=${path['generic']}",
                            "JENKINS_RPC_REPO=${JENKINS_RPC_REPO}",
                            "JENKINS_RPC_BRANCH=${JENKINS_RPC_BRANCH}"]) {
                      // variables inserted by jenkins that are also used
                      // JOB_NAME, BUILD_ID
                      // variables that could be used but aren't currently passed'
                      // USER_VARS, UPGRADE, ghprbTargetBranch, ghprbAuthorRepoGitUrl,
                      // OA_REPO, GET_PIP
                      git branch: "${JENKINS_RPC_BRANCH}", credentialsId: '3f643924-58f9-4c55-9fc0-b16049a108d2', url: 'http://github.com/rcbops/jenkins-rpc'
                      // git fetch origin "+refs/pull/*:refs/remotes/origin/pr/*"
                      wrap([$class: 'AnsiColorBuildWrapper']) {
                        catchError {
                          sh '#!/bin/bash\n . scripts/gating_bash_lib.sh; managed_aio'
                        }
                        catchError {
                          sh '#!/bin/bash\n . scripts/gating_bash_lib.sh; managed_cleanup'
                        }
                      } // ansicolor
                      archiveArtifacts allowEmptyArchive: true, artifacts: 'archive*/**/*', excludes: null
                  } // withenv
                } // withcreds
              } // stage
            } // node
          } // timeout
        } // timestamps
      } // per_path_block

      // determine the applicable upgrade paths
      node('master'){
          deleteDir()
          stage('calculate paths'){
              withEnv(['RPC_REPO=https://github.com/rcbops/rpc-openstack']){
                  git branch: "${JENKINS_RPC_BRANCH}", credentialsId: '3f643924-58f9-4c55-9fc0-b16049a108d2', url: "${JENKINS_RPC_REPO}"
                  sh 'ln -s . jenkins-rpc; scripts/dev-aio-upgrade/upgrade-parent-job.sh; cat upgrade.properties'
                  def paths_string = readFile('upgrade.properties')
                  def paths_list = paths_string.replaceFirst('UPGRADE_PATHS=','').split()
                  // c-style loop to avoid unserializable iterator
                  for (int i = 0; i < paths_list.size(); i++){
                  //for (int i = 0; i < 1; i++){
                      def path = [:]
                      def path_string = paths_list[i]
                      def path_list = path_string.split('_')
                      path['type'] = path_list[0]
                      path['from_name'] = path_list[1]
                      path['to_name'] = path_list[2]
                      path['from_sha'] = path_list[3]
                      path['to_sha'] = path_list[4]
                      path['generic'] = path_list[5]
                      path['repr'] = path_string
                      upgrade_paths[path_string]=make_step(path)
                  }
              }
          }
      }

      parallel upgrade_paths
